// A Config specifies the global config for a build.
#[derive(Clone, Debug)]
pub struct Config {
    // ABI file(s)
    pub abi_posix_wasi: &'static str,
    // Path of wavm binary, usually the result of "$ which wavm".
    pub wavm_binary: String,
    // Path of cc, usually the result of "$ which gcc".
    pub cc_binary: String,
}

impl Default for Config {
    fn default() -> Self {
        Config {
            abi_posix_wasi: include_str!("../abi/posix_wasi_abi.h"),
            wavm_binary: String::from("wavm"),
            cc_binary: String::from("gcc"),
        }
    }
}

#[derive(Clone, Debug, Default)]
pub struct Middle {
    // Dir of abi.
    pub abi_path: std::path::PathBuf,
    // File of the abi.
    pub abi_file: std::path::PathBuf,
    // The middle AOT object file generated by aot_generator
    pub aot_object: std::path::PathBuf,
    // The middle AOT glue file generated by aot_generator
    pub aot_glue: std::path::PathBuf,
    // Config is the global config for a build.
    pub config: Config,
    // Dir is the caller's working directory, or the empty string to use
    // the current directory of the running process.
    pub dir: std::path::PathBuf,
    // Path of dummy file.
    pub dummy: std::path::PathBuf,
    // Source wasm/wast file.
    pub file: std::path::PathBuf,
    // File stem is the source wasm/wast file's name without extension.
    // Example:
    //   file_stem(helloworld.wasm) => helloworld
    pub file_stem: String,
    // Project address, usually equals to file.dirname
    pub prog_dir: std::path::PathBuf,
    // A directory on the file system that is deleted when build process stoped,
    // all temporary files during the build process will be stored here
    // Note: If you quit unexpectedly, it will not be cleaned up.
    // temp_dir: std::path::PathBuf,
    // Precompiled wasm file built by wavm.
    pub wavm_precompiled_wasm: std::path::PathBuf,
}

impl Middle {
    pub fn init_file<P: AsRef<std::path::Path>>(&mut self, p: P) {
        self.file = p.as_ref().to_path_buf();
        self.file_stem = self.file.file_stem().unwrap().to_str().unwrap().to_string();
        self.prog_dir = self.file.parent().unwrap().to_path_buf();
        if self.prog_dir.parent() == None {
            self.prog_dir = std::path::PathBuf::from("./");
        }
    }
}
